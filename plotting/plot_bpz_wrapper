#!/usr/bin/env python3
import argparse
import os
import sys

import matplotlib
import numpy as np
from matplotlib import pyplot as plt

from MICE2_mocks.plotting import (
    get_plotting_folder, hist_step_filled, photoz_statistics,
    subplot_grid, subsampling_mask)
from table_tools import load_table


if __name__ == "__main__":
    plt.switch_backend("agg")

    parser = argparse.ArgumentParser(
        description='Create check plots for data created with '
                    '"mocks_bpz_wrapper"')

    parser.add_argument(
        '--fig-scale', type=float, default=1.0,
        help='scaling factor for image size (default: %(default)s)')
    parser.add_argument(
        '--o-format', default='png',
        help='format of plots (matplotlib supported image format, '
             'default: %(default)s)')

    sim_group = parser.add_argument_group('simulation')
    sim_group.add_argument(
        '-s', '--simulated', required=True,
        help='file path of the simulation table')
    sim_group.add_argument(
        '--s-format', default='fits',
        help='astropy.table format specifier of the simulation table')
    sim_group.add_argument(
        '--s-z-true', required=True,
        help='column name of true redshifts in simulation table')
    sim_group.add_argument(
        '--s-points', metavar="N", type=int, default=50000,
        help='plot a subsample of N points from the simulation table '
             '(default: %(default)s)')

    data_group = parser.add_argument_group('data')
    data_group.add_argument(
        '-d', '--data',
        help='file path of the data table')
    data_group.add_argument(
        '--d-format', default='fits',
        help='astropy.table format specifier of the data table')
    data_group.add_argument(
        '--d-zb',
        help='column name of photometric redshifts in data table')
    data_group.add_argument(
        '--d-points', metavar="N", type=int, default=50000,
        help='plot a subsample of N points from the data table '
             '(default: %(default)s)')

    args = parser.parse_args()

    # get simulation data
    columns = ["Z_B", "M_0"]
    if args.s_z_true is not None:
        columns.append(args.s_z_true)
    simul = load_table(args.simulated, args.s_format, columns)
    simul = simul[np.abs(simul["M_0"]) < 99.0]  # remove non-detections
    simul_sparse = simul[subsampling_mask(simul, args.s_points)]
    # get real data
    if args.data is not None:
        data = load_table(args.data, args.d_format, [args.d_zb])
    else:
        data = None

    plot_dir = get_plotting_folder(args.simulated)

    print("plot photo-z distribution")
    # plot photo-z histogram
    fig, axes = subplot_grid(1, 1, scale=args.fig_scale)
    ax = axes[0, 0]
    # figure out automatic plot limits
    if args.d_zb is not None:
        dlim = np.percentile(data[args.d_zb], 99.75)
    else:
        dlim = 0.0
    slim = np.percentile(simul["Z_B"], 99.75)
    bins = np.arange(0.0, max(slim, dlim) + 0.05, 0.05)
    # plot data
    if args.d_zb is not None:
        hist_step_filled(data[args.d_zb], bins, "C3", label=args.d_zb, ax=ax)
    hist_step_filled(simul["Z_B"], bins, "C0", label="Z_B", ax=ax)
    # add labels
    ax.set_xlim(0.0, bins[-1])
    ax.set_ylim(bottom=0.0)
    ax.set_xlabel("photometric redshift")
    ax.set_ylabel("relative frequency")
    ax.grid(alpha=0.25)
    ax.legend(loc="upper right", prop={"size": 8})
    # finalize the plot
    plt.tight_layout(h_pad=0.0, w_pad=0.0)
    plt.savefig(
        os.path.join(plot_dir, "zphot_histogram.%s" % args.o_format))
    plt.close(fig)

    if args.s_z_true in simul.colnames:

        print("plot photo-z statistics against redshifts and prior magnitude")
        stats = photoz_statistics(simul[args.s_z_true], simul["Z_B"])
        # plot statistics against some quantities
        step = True
        n_cols, n_rows = 3, 3
        fig, axes = subplot_grid(
            n_cols * n_rows, n_cols, sharex=False, sharey=False,
            scale=args.fig_scale)
        # plot against photo-z
        stats.plot_statistics(
            simul["Z_B"], xlabel="Z_B",
            axes=axes[:, 0], step=step)
        # plot against true redshift
        stats.plot_statistics(
            simul[args.s_z_true], xlabel="z_cgal_v",
            axes=axes[:, 1], step=step)
        # plot against prior magnitude
        stats.plot_statistics(
            simul["M_0"], xlabel="M_0 / mag",
            axes=axes[:, 2], step=step)
        # get the y-axis limit along each row
        ymin = np.empty_like(axes, dtype=np.float64)
        ymax = np.empty_like(axes, dtype=np.float64)
        for i in range(n_cols * n_rows):
            i_row, i_col = i // n_cols, i % n_cols
            ax = axes[i_row, i_col]
            ymin[i_row, i_col], ymax[i_row, i_col] = ax.get_ylim()
        row_min = np.min(ymin, axis=1)
        row_min[[0, 2]] = [0.0, 0.0]  # force 0 in these rows
        row_max = np.max(ymax, axis=1)
        # remove all axis labels, ticks that are not required, adjust y-limits
        for i in range(n_cols * n_rows):
            i_row, i_col = i // n_cols, i % n_cols
            ax = axes[i_row, i_col]
            if i_col > 0:
                ax.tick_params(labelleft=False)
                ax.set_ylabel("")
            if i_row < n_rows - 1:
                ax.tick_params(labelbottom=False)
            if i_col < n_cols - 1:
                ax.set_xlim(left=0.0)
            ax.set_ylim(row_min[i_row], row_max[i_row])
        # finalize the plot
        plt.tight_layout(h_pad=0.0, w_pad=0.0)
        fig.subplots_adjust(hspace=0.0, wspace=0.0)
        plt.savefig(
            os.path.join(plot_dir, "zphot_statistics.%s" % args.o_format))
        plt.close(fig)

        print("plot photo-z against true redshift")
        stats_sparse = photoz_statistics(
            simul_sparse[args.s_z_true], simul_sparse["Z_B"])
        # plot zphot vs zspec
        fig = stats_sparse.plot_photoz_scatter(
            simul_sparse[args.s_z_true], xlabel=args.s_z_true,
            scale=args.fig_scale)
        plt.tight_layout(h_pad=0.0, w_pad=0.0)
        plt.savefig(
            os.path.join(plot_dir, "zphot_scatter.%s" % args.o_format))
        plt.close(fig)

    # plot the Q-statistic
    if "Q_value" in simul.colnames:

        print("plot photo-z likelihood metric")
        # plot Q-value histogram
        fig, axes = subplot_grid(1, 1, scale=args.fig_scale)
        ax = axes[0, 0]
        hist_step_filled(
            simul["Q_value"], np.linspace(0.0, 1.0, 101), "C0", ax=ax)
        ax.axhline(y=1.0, color="k", lw=1.0, ls="--")
        # add labels
        ax.set_xlim(0.0, 1.0)
        ax.set_ylim(0.0, min(3.0, ax.get_ylim()[1]))
        ax.set_xlabel(r"Q = $\int_0^{z_{\rm true}} p(z) z \,{\rm d}z$")
        ax.set_ylabel("relative frequency")
        ax.grid(alpha=0.25)
        # finalize the plot
        plt.tight_layout(h_pad=0.0, w_pad=0.0)
        plt.savefig(
            os.path.join(plot_dir, "zphot_Q_value.%s" % args.o_format))
        plt.close(fig)
