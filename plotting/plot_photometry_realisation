#!/usr/bin/env python3
import argparse
import os
import sys

import matplotlib
import numpy as np
from matplotlib import pyplot as plt

from MICE2_mocks.plotting import (
    get_plotting_folder, subsampling_mask,
    contour_per_filter, histogram_per_filter)
from table_tools import load_table


if __name__ == "__main__":
    plt.switch_backend("agg")

    parser = argparse.ArgumentParser(
        description='Create check plots for data created with '
                    '"mocks_bpz_wrapper"')

    parser.add_argument(
        '--fig-scale', type=float, default=1.0,
        help='scaling factor for image size (default: %(default)s)')
    parser.add_argument(
        '--o-format', default='png',
        help='format of plots (matplotlib supported image format, '
             'default: %(default)s)')

    sim_group = parser.add_argument_group('simulation')
    sim_group.add_argument(
        '-s', '--simulated', required=True,
        help='file path of the simulation table')
    sim_group.add_argument(
        '--s-format', default='fits',
        help='astropy.table format specifier of the simulation table')
    sim_group.add_argument(
        '--s-filters', nargs='*', required=True,
        help='list of table column names of magnitudes in simulation table')
    sim_group.add_argument(
        '--s-errors', nargs='*', required=True,
        help='list of table column names of magnitude errors in simulation '
             'table')
    sim_group.add_argument(
        '--s-points', metavar="N", type=int, default=50000,
        help='plot a subsample of N points from the simulation table in '
             'scatter plots (default: %(default)s)')

    data_group = parser.add_argument_group('data')
    data_group.add_argument(
        '-d', '--data',
        help='file path of the data table')
    data_group.add_argument(
        '--d-format', default='fits',
        help='astropy.table format specifier of the data table')
    data_group.add_argument(
        '--d-filters', nargs='*',
        help='list of table column names of magnitudes in data table')
    data_group.add_argument(
        '--d-errors', nargs='*',
        help='list of table column names of magnitude errors in data table')
    data_group.add_argument(
        '--d-extinct', nargs='*',
        help='list of table column names of extinction term in data table')
    data_group.add_argument(
        '--d-points', metavar="N", type=int, default=50000,
        help='plot a subsample of N points from the data table in scatter '
             'plots (default: %(default)s)')

    args = parser.parse_args()

    # get simulation data
    columns = []
    columns.extend(args.s_filters)
    columns.extend(args.s_errors)
    simul = load_table(args.simulated, args.s_format, columns)
    try:
        simul = simul[np.abs(simul["M_0"]) < 90.0]  # remove non-detections
    except KeyError:
        pass
    simul_sparse = simul[subsampling_mask(simul, args.s_points)]
    if len(args.s_filters) != len(args.s_errors):
        sys.exit(
            "ERROR: number of filter and error columns does not match in"
            " simulations")
    # get real data
    if args.data is not None:
        columns = []
        if args.d_filters is None:
            sys.exit("ERROR: external data without magnitudes is useless")
        else:
            columns.extend(args.d_filters)
        if args.d_errors is not None:
            if len(args.d_filters) != len(args.d_errors):
                sys.exit(
                    "ERROR: number of filter and error columns does not match "
                    "in data")
            columns.extend(args.d_errors)
        if args.d_extinct is not None:
            if len(args.d_filters) != len(args.d_extinct):
                sys.exit(
                    "ERROR: number of filter and extinction columns does not "
                    "match in data")
            columns.extend(args.d_extinct)
        data = load_table(args.data, args.d_format, columns)
        # apply extinction correction
        if args.d_extinct is not None:
            print("apply extinction correction to data")
            for dmag, dext in zip(args.d_filters, args.d_extinct):
                data[dmag] -= data[dext]
        data_sparse = data[subsampling_mask(data, args.d_points)]
    else:
        data = None
        setattr(args, "d_filters", [None] * len(args.s_filters))

    plot_dir = get_plotting_folder(args.simulated)

    print("plot magnitude distribution")
    # plot magnitude distributions
    mmin = []
    mmax = []
    m_data = []
    mask_data = []
    m_simul = []
    mask_simul = []
    for skey, dkey in zip(args.s_filters, args.d_filters):
        # prepare simulation
        sdata = simul[skey]
        mask_simul.append(np.abs(sdata) < 90.0)
        m_simul.append(sdata[mask_simul[-1]])
        # prepare data
        if dkey is not None:
            ddata = data[dkey]
            mask_data.append(np.abs(ddata) < 90.0)
            m_data.append(ddata[mask_data[-1]])
        else:
            m_data.append([np.median(m_simul[-1])])
        # get automatic limits
        mmin.append(min(
            np.percentile(m_simul[-1], 0.5),
            np.percentile(m_data[-1], 0.5)))
        mmax.append(max(
            np.percentile(m_simul[-1], 99.5),
            np.percentile(m_data[-1], 99.5)))
    fig = histogram_per_filter(
        m_data if data is not None else None, args.d_filters,
        m_simul, args.s_filters,
        bins=np.arange(min(mmin), max(mmax), 0.1),
        n_filters=len(args.s_filters), xlabel="magnitude",
        label_pos="upper left", scale=args.fig_scale)
    plt.savefig(os.path.join(plot_dir, "magnitudes." + args.o_format))
    plt.close(fig)

    print("plot colour distribution")
    # plot colour distributions
    cmin = []
    cmax = []
    c_data = []
    l_data = []
    c_simul = []
    l_simul = []
    for i in range(len(args.s_filters) - 1):
        # prepare simulation
        mask = mask_simul[i] & mask_simul[i + 1]
        c_simul.append(
            simul[args.s_filters[i]][mask] -
            simul[args.s_filters[i + 1]][mask])
        l_simul.append(
            "%s - %s" % (args.s_filters[i], args.s_filters[i + 1]))
        # prepare data
        if data is not None:
            mask = mask_data[i] & mask_data[i + 1]
            c_data.append(
                data[args.d_filters[i]][mask] -
                data[args.d_filters[i + 1]][mask])
            l_data.append(
                "%s - %s" % (args.d_filters[i], args.d_filters[i + 1]))
        else:
            c_data.append([np.median(c_simul[-1])])
        # get automatic limits
        cmin.append(min(
            np.percentile(c_simul[-1], 2.5),
            np.percentile(c_data[-1], 2.5)))
        cmax.append(max(
            np.percentile(c_simul[-1], 97.5),
            np.percentile(c_data[-1], 97.5)))
    fig = histogram_per_filter(
        c_data if data is not None else None, l_data, c_simul, l_simul,
        bins=np.arange(min(cmin), max(cmax), 0.03),
        n_filters=len(args.s_filters) - 1, xlabel="colour",
        label_pos="upper left", scale=args.fig_scale)
    for ax in fig.axes:
        ax.axvline(x=0, color="k", lw=0.75)
    plt.savefig(os.path.join(plot_dir, "colours." + args.o_format))
    plt.close(fig)

    if args.s_errors is not None:

        print("plot error against magnitude relation")
        emin = []
        emax = []
        m_data = []
        m_simul = []
        e_data = []
        e_simul = []
        for i in range(len(args.s_filters)):
            sdata = simul_sparse[args.s_filters[i]]
            mask = np.abs(sdata) < 90.0
            m_simul.append(sdata[mask])
            e_simul.append(simul_sparse[args.s_errors[i]][mask])
            if args.d_errors is not None:
                ddata = data_sparse[args.d_filters[i]]
                mask = np.abs(ddata) < 90.0
                m_data.append(ddata[mask])
                e_data.append(data_sparse[args.d_errors[i]][mask])
            else:
                e_data.append([np.median(e_simul[-1])])
            emin.append(min(
                np.percentile(e_simul[-1], 0.0),
                np.percentile(e_data[-1], 0.0)))
            emax.append(max(
                np.percentile(e_simul[-1], 80),
                np.percentile(e_data[-1], 80)))
        fig = contour_per_filter(
            e_data if args.d_errors is not None else None,
            m_data if args.d_errors is not None else None,
            args.d_errors,
            e_simul, m_simul, args.s_errors,
            xlim=[min(mmin) - 0.1, max(mmax) - 0.3],
            ylim=[min(emin) - 0.01, max(emax) + 0.01],
            ylabel="magnitude error",
            label_pos="upper left", n_filters=len(args.s_filters),
            scale=args.fig_scale)
        plt.savefig(
            os.path.join(plot_dir, "magnitude_errors." + args.o_format))
        plt.close(fig)
