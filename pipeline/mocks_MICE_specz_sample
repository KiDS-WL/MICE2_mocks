#!/usr/bin/env python3
import argparse
import os
import sys
from hashlib import md5

import numpy as np
from matplotlib import pyplot as plt
from scipy.integrate import cumtrapz
from scipy.stats import gaussian_kde

from MICE2_mocks import pipeline  # provides spec-z selection functions
from table_tools import load_table


if __name__ == "__main__":

    survey_names = []
    selection_functions = {}
    for s in pipeline.__dir__():
        if s.startswith("make_"):
            survey = s[5:]
            survey_names.append(survey)
            selection_functions[survey] = getattr(pipeline, s)

    parser = argparse.ArgumentParser(
        description='Mimic the selection of common spectroscopic surveys for '
                    'the MICE2 simulation. The MICE2 and spectroscopic input '
                    'data must have the same area. to get the correct number '
                    'counts.')

    sim_group = parser.add_argument_group('simulation')
    sim_group.add_argument(
        '-s', '--simulated', required=True,
        help='file path of the simulation table')
    sim_group.add_argument(
        '--s-type', required=True, choices=('KV450', 'DES'),
        help='simulated photometric data sample')
    sim_group.add_argument(
        '--s-format', default='fits',
        help='astropy.table format specifier of the simulation table')

    data_group = parser.add_argument_group('data')
    data_group.add_argument(
        '-n', '--n-data', type=int,
        help='number of mock galaxies objects after downsampling (for '
             'selection functions that match the total number of objects)')
    data_group.add_argument(
        '-d', '--data',
        help='file path of the data table (for '
             'selection functions that match the data redshift distribution)')
    data_group.add_argument(
        '--d-format', default='fits',
        help='astropy.table format specifier of the data table')
    data_group.add_argument(
        '--d-z-spec',
        help='column name of spectroscopic redshifts in data table (for '
             'selection functions that match the data redshift distribution)')

    params_group = parser.add_argument_group('parameters')
    params_group.add_argument(
        '--seed', default='KV450',
        help='string to seed the random generator (default: %(default)s)')
    params_group.add_argument(
        '--survey', required=True, choices=survey_names,
        help='selection function to use')
    params_group.add_argument(
        '--pass-phot-detection', action='store_true',
        help='whether included objects must be detected in the photometric '
             'survey (--s-type) detection band')
    params_group.add_argument(
        '--stats-file', choices=('n', 'w', 'a'), default='n',
        help='whether or not (n) a file with basic object selection '
             'statistics is created (w) or appended to (a) '
             '(default: %(default)s)')
    params_group.add_argument(
        '-o', '--output', required=True, help='file path of output table')
    params_group.add_argument(
        '--o-format', default='fits',
        help='astropy.table format specifier of the output table '
             '(default: %(default)s)')

    args = parser.parse_args()

    # get simulation data
    if args.s_type == "KV450":
        simul = pipeline.KV450_MICE_data(
            load_table(args.simulated, args.s_format))
    elif args.s_type == "DES":
        simul = pipeline.DES_MICE_data(
            load_table(args.simulated, args.s_format))
    else:
        raise ValueError("unspecified survey --s-type '%s'" % args.s_type)
    # get real data
    if args.data is not None:
        if args.d_z_spec is None:
            sys.exit("ERROR: argument --data requires --d-z-spec")
        data = load_table(args.data, args.d_format, [args.d_z_spec])
        data = data[args.d_z_spec]
    else:
        data = None

    # select galaxies
    print("apply selection function of: %s" % args.survey)
    # reseed the random state to make results reproducible
    hasher = md5(bytes(args.seed, "utf-8"))
    hashval = bytes(hasher.hexdigest(), "utf-8")
    np.random.seed(np.frombuffer(hashval, dtype=np.uint32))
    selection_function = selection_functions[args.survey](simul)
    if selection_function.needs_n_tot:
        if args.n_data is None:
            sys.exit(
                "ERROR: selection function '%s' requires --n-data" %
                args.survey)
        simul_spec, stats = selection_function(
            args.n_data, args.pass_phot_detection)
    elif selection_function.needs_n_z:
        if args.data is None:
            sys.exit(
                "ERROR: selection function '%s' requires --data" %
                args.survey)
        simul_spec, stats = selection_function(
            data, args.pass_phot_detection)
    else:
        simul_spec, stats = selection_function(
            args.pass_phot_detection)

    # process the statistics
    if args.stats_file != "n":
        filename = os.path.join(
            os.path.dirname(args.output), "%s_selection.stats" % args.survey)
        print(
            "%s the selection statistics to: %s" % (
                "append" if args.stats_file == "a" else "write", filename))
        # create a table header
        keyorder = sorted(key for key in stats[0].keys() if key != "method")
        header = ""
        for stat in stats:
            header += "%s (%s)    " % (stat["method"], ",".join(keyorder))
        line = ""
        for stat in stats:
            line += "%8d %.3f    " % tuple(stat[key] for key in keyorder)
        line += args.output
        write_header = not os.path.exists(filename) or args.stats_file == "w"
        with open(filename, args.stats_file) as f:
            if write_header:
                f.write(header + "\n")
            f.write(line + "\n")

    # write to specified output path
    print("write table to: %s" % args.output)
    simul_spec.write(args.output, format=args.o_format, overwrite=True)
