#!/usr/bin/env python
import argparse
import os
import sys

import numpy as np

from h5table.table import HDF5table
from MICE2_mocks import pipeline


def magnification_correction(mag, kappa):
    """
    Magnification calculated from the convergence, following Fosalba+15 eq. 21.

    Parameters
    ----------
    mag : array_like
        (Evolution corrected) model magnitudes.
    kappa : array_like
        Convergence field at the galaxy positions.

    Returns
    -------
    mag_magnified : array_like
        Magnitudes corrected for magnification.
    """
    d_mu = 2.0 * kappa
    mag_magnified = mag - 2.5 * np.log10(1 + d_mu)
    return mag_magnified


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description='Compute magnitudes corrected for gravitational lensing '
                    'magnification in the limit of weak lensing.')
    parser.add_argument(
        'dataset', help='HDF5 data set with MICE2 raw data')
    parser.add_argument(
        '-c', '--chunksize', type=int, default=100000,
        help='HDF5 data set with MICE2 raw data (default: %(default)s)')
    args = parser.parse_args()

    logger = pipeline.pipe_logger(__file__)

    index_path = "unique_gal_id"
    with HDF5table(args.dataset, index_path, "w", True) as table:

        # find convergence column
        kappa_path = "kappa"
        if kappa_path not in table:
            message = "convergence column {:} not found in data set"
            logger.error(message.format(kappa_path))
            raise KeyError(message.format(kappa_path))

        # find all magnitude columns
        mag_paths = []
        for col in table.colnames:
            if col.endswith("_true") and \
                    col.replace("_true", "_evo") not in table.colnames:
                mag_paths.append(col)
            if col.endswith("_evo"):
                mag_paths.append(col)
        if len(mag_paths) == 0:
            message = "no magnitude columns found in data set"
            logger.error(message)
            raise KeyError(message)

        # apply the magnification
        for mag_path in mag_paths:
            logger.info("applying magnification to '{:}'".format(mag_path))
            # create new output columns
            lensed_path = mag_path + "_mag"
            try:
                table.add_column(lensed_path, dtype=table.dtype[mag_path])
            except ValueError:
                message = "column '{:}' will be overwritten"
                logger.warning(message.format(lensed_path))
            # iterate the data set in chunks
            for start, end in table.iter_rows(args.chunksize):
                kappa = table.read_column(kappa_path, start=start, end=end)
                mags = table.read_column(mag_path, start=start, end=end)
                lensed = magnification_correction(mags, kappa)
                table.write_column(lensed, lensed_path, start=start, end=end)
                # description: "magnitude magnified by gravitational lensing"
            logger.info("done writing")
