#!/usr/bin/env python
import argparse
import os
import sys

import numpy as np

from h5table.memmap import BinaryTable
from MICE2_mocks import pipeline


def magnification_correction(mag, kappa):
    """
    Magnification calculated from the convergence, following Fosalba+15 eq. 21.

    Parameters
    ----------
    mag : array_like
        (Evolution corrected) model magnitudes.
    kappa : array_like
        Convergence field at the galaxy positions.

    Returns
    -------
    mag_magnified : array_like
        Magnitudes corrected for magnification.
    """
    d_mu = 2.0 * kappa
    mag_magnified = mag - 2.5 * np.log10(1 + d_mu)
    return mag_magnified


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description='Compute magnitudes corrected for gravitational lensing '
                    'magnification in the limit of weak lensing.')
    parser.add_argument(
        'dataset', help='memory mapped table data set with MICE2 raw data')
    parser.add_argument(
        '-c', '--chunksize', type=int, default=10000,
        help='row chunk size to process at once (default: %(default)s)')
    args = parser.parse_args()

    logger = pipeline.pipe_logger(__file__)

    with BinaryTable(args.dataset, mode="r+") as table:

        # find convergence column
        kappa_path = "kappa"
        if kappa_path not in table:
            message = "convergence column {:} not found in data set"
            logger.error(message.format(kappa_path))
            raise KeyError(message.format(kappa_path))

        # find all magnitude columns
        mag_paths = []
        for col in table.colnames:
            if col.endswith("_true") and \
                    col.replace("_true", "_evo") not in table.colnames:
                mag_paths.append(col)
            if col.endswith("_evo"):
                mag_paths.append(col)
        if len(mag_paths) == 0:
            message = "no magnitude columns found in data set"
            logger.error(message)
            raise KeyError(message)

        # apply the magnification
        for mag_path in mag_paths:
            logger.info("applying magnification to '{:}'".format(mag_path))
            # create new output columns
            lensed_path = mag_path + "_mag"
            lensed = table.add_column(
                lensed_path, dtype=table[mag_path].dtype.str)
            lensed.attr = {
                "description": "magnitude magnified by gravitational lensing"}
            # compute the corrected magnitudes
            for start, end in table.row_iter(args.chunksize):
                mags = table[mag_path][start:end]
                kappa = table[kappa_path][start:end]
                lensed[start:end] = magnification_correction(mags, kappa)
