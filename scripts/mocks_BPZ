#!/usr/bin/env python3
import argparse
import os
import sys

import mock_processing as mocks
from mock_processing.core.config import DumpBpzConfig, load_bpz_config
from mock_processing.photoz import BpzManager


parser = argparse.ArgumentParser(
    description="Compute magnitudes corrected for gravitational lensing "
                "magnification in the limit of weak lensing.",
    add_help=False)
parser.register("action", "dump", DumpBpzConfig)

parser.add_argument(
    "datastore", help="directory in which the data store is located")
parser.add_argument(
    "--mag",
    help="sub-directory within data store which contains the input magnitudes")
parser.add_argument(
    "--zphot",
    help="sub-directory within data store where the BPZ output is stored")
parser.add_argument(
    "-c", "--config", required=True,
    help="parameter file in TOML format to configure BPZ")
parser.add_argument(
    "--threads", type=int, default=-1,
    help="maximum number of threads to use (default: all)")

help_group = parser.add_argument_group("help and documentation")
help_group.add_argument(
    "-h", "--help", action="help",
    help="show this help message and exit")
help_group.add_argument(
    "--dump", nargs=0, action="dump",
    help="dump a default BPZ configuration file to stdout and exit")


def main():

    args = parser.parse_args()
    logger = mocks.PipeLogger(__file__, args.datastore)

    # check the configuration file
    config = load_bpz_config(args.config, logger)

    # run BPZ on the selected magnitudes
    with mocks.DataStore.open(args.datastore, False, logger=logger) as ds:
        ds.pool.max_threads = args.threads

        # find all magnitude columns
        try:
            input_mags, input_errs = ds.load_photometry(args.mag)
        except KeyError as e:
            logger.handleException(e)

        # launch the BPZ manager
        logger.info("initializing BPZ")
        with BpzManager(config, logger) as bpz:

            ds.pool.set_worker(bpz.execute)
            ds.pool.parse_thread_id = True

            # add the magnitude and error columns to call signature
            for key in bpz.filter_names:
                try:
                    mag_key, err_key = input_mags[key], input_errs[key]
                    ds.pool.add_argument_column(mag_key)
                    ds.pool.add_argument_column(err_key)
                except KeyError as e:
                    logger.handleException(e)

            # create the output columns
            for key, desc in bpz.descriptions.items():
                zphot_path = os.path.join(args.zphot, key)
                # create new output columns
                ds.add_column(
                    zphot_path, dtype=bpz.dtype[key].str, overwrite=True,
                    attr={"description": desc})
                # add columns to call signature
                ds.pool.add_result_column(zphot_path)

            ds.pool.execute()
        logger.info("computation completed for {:,d} entries".format(len(ds)))


if __name__ == "__main__":
    main()
