#!/usr/bin/env python3
import argparse
import logging.config
from os import path

from galmock.core.config import TableParser, logging_config
from galmock.core.readwrite import SUPPORTED_READERS
from galmock.core.utils import expand_path
from galmock.jobs import init_pipeline


parser = argparse.ArgumentParser(
    description="Convert a data set to an internal data store.",
    add_help=False)
parser.register("action", "dump", TableParser.get_dump())

parser.add_argument(
    "datastore", type=expand_path,
    help="directory in which the data store is created")
parser.add_argument(
    "--purge", action="store_true",
    help="delete any existing data in datastore")

input_group = parser.add_argument_group("input simulation table")
input_group.add_argument(
    "-i", "--input", type=expand_path, required=True,
    help="path to input simulation table")
input_group.add_argument(
    "--format", choices=sorted(SUPPORTED_READERS.keys()),
    help="input table file format (default: inferred from file extension)")
input_group.add_argument(
    "-c", "--columns", type=expand_path, required=True,
    help="parameter file in TOML format that maps the input data column "
         "names to file paths within the data store (use --dump to obtain an "
         "empty parameter file)")
input_group.add_argument(
    "--fits-ext", type=int, default=1,
    help="FITS table extension to read (default: %(default)s)")
parser.add_argument(
    "-v", "--verbose", action="store_true", help="display debugging messages")

help_group = parser.add_argument_group("help and documentation")
help_group.add_argument(
    "-h", "--help", action="help",
    help="show this help message and exit")
help_group.add_argument(
    "--dump", nargs=0, action="dump",
    help="dump a default columns file to stdout and exit")


def main():
    args = parser.parse_args()
    logging.config.dictConfig(
        logging_config(args.datastore + ".log",
        overwrite=True, verbose=args.verbose))
    init_pipeline(**{name: getattr(args, name) for name in vars(args)})


if __name__ == "__main__":
    main()
