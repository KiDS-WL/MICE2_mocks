#!/usr/bin/env python3
import argparse
import logging.config

from galmock import GalaxyMock
from galmock.core.config import logging_config
from galmock.core.readwrite import SUPPORTED_READERS
from galmock.core.utils import expand_path


parser = argparse.ArgumentParser(
    description="Ingest a single data column from an external data source. "
                "The length of the data must match the number of entries in "
                "the data store and is not checked in advance.")
parser.add_argument(
    "datastore", type=expand_path,
    help="directory in which the data store is created")
parser.add_argument(
    "--overwrite", action="store_true",
    help="overwrite any existing column in datastore")
parser.add_argument(
    "-p", "--path",
    help="path to store the new column at in the data store (default: input "
         "column name)")
parser.add_argument(
    "--description", help="descriptive text to store as column attribute")
parser.add_argument(
    "-v", "--verbose", action="store_true", help="display debugging messages")

input_group = parser.add_argument_group("external table")
input_group.add_argument(
    "-i", "--input", type=expand_path, required=True,
    help="path to table containing the input column")
input_group.add_argument(
    "--format", choices=sorted(SUPPORTED_READERS.keys()),
    help="input table file format (default: inferred from file extension)")
input_group.add_argument(
    "-c", "--column",
    help="name of the data column in the input file")
input_group.add_argument(
    "--fits-ext", type=int, default=1,
    help="FITS table extension to read (default: %(default)s)")


def main():
    args = parser.parse_args()
    logging.config.dictConfig(
        logging_config(args.datastore + ".log",
        overwrite=False, verbose=args.verbose))
    with GalaxyMock(args.datastore, False) as mocks:
        mocks.ingest_column(
            args.input, args.format, args.fits_ext, args.column, args.path,
            args.description, args.overwrite)


if __name__ == "__main__":
    main()
