#!/usr/bin/env python
import argparse
import os
import sys

import mock_processing as mocks
from mock_processing.core.config import DumpSampleConfig, load_sample_config
from mock_processing import samples


parser = argparse.ArgumentParser(
    description="Apply sample selections on to obtain a mock representation "
                "of a specific photometric or spectroscopic sample.",
    add_help=False)
parser.register("action", "dump", DumpSampleConfig)

parser.add_argument(
    "datastore", help="directory in which the data store is located")
parser.add_argument(
    "--sample", required=True,
    choices=sorted(samples.REGISTERED_SAMPLES.keys()),
    help="name of the sample selection to apply")
parser.add_argument(
    "-c", "--config", required=True,
    help="parameter file in TOML format that defines data columns required "
         "for the sample selection (use --dump to obtain a default parameter "
         "file)")
parser.add_argument(
    "--area", type=float,
    help="total area in squared degrees on the sky covered by the base "
         "simulation (required by: {:})".format(
             ", ".join(sorted(samples.REQUIRE_AREA))))
parser.add_argument(
    "--seed", default="sapling",
    help="string to seed the random generator (default: %(default)s, results "
         "are only reproducible for the same number of threads)")
parser.add_argument(
    "--threads", type=int, default=16,
    help="number of threads to use (default: %(default)s)")

help_group = parser.add_argument_group("help and documentation")
help_group.add_argument(
    "-h", "--help", action="help",
    help="show this help message and exit")
help_group.add_argument(
    "--dump", nargs=1, action="dump", metavar="sample",
    choices=sorted(samples.REGISTERED_SAMPLES.keys()),
    help="dump a default configuration file to stdout and exit for a given "
         "sample (see --sample for a list of valid names)")


def main():

    args = parser.parse_args()
    if args.area is None and args.sample in samples.REQUIRE_AREA:
        message = "'{:}' requires --area parameter".format(args.sample)
        raise parser.error(message)
    logger = mocks.PipeLogger(__file__, args.datastore)

    # check the configuration file
    config = load_sample_config(args.config, logger, sample=args.sample)

    # apply the magnification correction to the model magnitudes
    with mocks.DataStore.open(args.datastore, False, logger=logger) as ds:

        # initialize the selection function
        selector_class = samples.REGISTERED_SAMPLES[args.sample]
        selector = selector_class()

        ds.pool.set_worker(selector)

        # select the columns needed for the selection function
        for name, path in config.selection.items():
            ds.require_column(path)
            ds.pool.add_argument_column(path, keyword=name)

        # make the output column
        ds.add_column(
            config.mask, dtype=selector.dtype, overwrite=True,
            attr={"description": selector.description})
        ds.pool.add_result_column(config.mask)

        # compute and store the corrected magnitudes
        ds.pool.execute(args.threads, seed=args.seed)
        logger.info("computation completed for {:,d} entries".format(len(ds)))


if __name__ == "__main__":
    main()
