#!/usr/bin/env python3
import argparse
import logging.config

from galmock import GalaxyMock
from galmock.core.config import TableParser, logging_config
from galmock.core.readwrite import SUPPORTED_READERS
from galmock.core.utils import expand_path


parser = argparse.ArgumentParser(
    description="Merge data from an external file onto the data store using a "
                "unique identifier. This identifier must be sorted "
                "numerically increasing.")
parser.add_argument(
    "datastore", type=expand_path,
    help="directory in which the data store is created")
parser.add_argument(
    "--lid", required=True,
    help="path to the unique identifier column in the data store")
parser.add_argument(
    "--rid", required=True,
    help="name of the unique identifier column in the input file")
parser.add_argument(
    "--overwrite", action="store_true",
    help="overwrite any existing column in datastore")
parser.add_argument(
    "-v", "--verbose", action="store_true", help="display debugging messages")

input_group = parser.add_argument_group("external table")
input_group.add_argument(
    "-i", "--input", type=expand_path, required=True,
    help="path to table that is merged onto the data store")
input_group.add_argument(
    "--format", choices=sorted(SUPPORTED_READERS.keys()),
    help="input table file format (default: inferred from file extension)")
input_group.add_argument(
    "-c", "--columns", type=expand_path, required=True,
    help="parameter file in TOML format that maps the input data column "
         "names to file paths within the data store (use --dump to obtain an "
         "empty parameter file)")
input_group.add_argument(
    "--fits-ext", type=int, default=1,
    help="FITS table extension to read (default: %(default)s)")


def main():
    args = parser.parse_args()
    logging.config.dictConfig(
        logging_config(args.datastore + ".log",
        overwrite=False, verbose=args.verbose))
    with GalaxyMock(args.datastore, False) as mocks:
        mocks.merge(
            args.input, args.id, args.format, args.fits_ext, args.columns,
            args.overwrite)


if __name__ == "__main__":
    main()
