#!/usr/bin/env python3
import argparse

from mock_processing.jobs import photometry
from mock_processing.photometry import PhotometryParser


parser = argparse.ArgumentParser(
    description="Create a photometry realisation based on simulated apertures "
                "and magnitude limits.",
    add_help=False)
parser.register("action", "dump", PhotometryParser.get_dump())

parser.add_argument(
    "datastore", help="directory in which the data store is located")

parser.add_argument(
    "--mag",
    help="sub-directory within data store which contains the input magnitudes")
parser.add_argument(
    "--real",
    help="sub-directory within data store where the photometry realisations "
         "are stored")
parser.add_argument(
    "--method", choices=("SExtractor", "GAaP"), default="SExtractor",
    help="photometry algorthim to apply (default: %(default)s)")
parser.add_argument(
    "-c", "--config", required=True,
    help="parameter file in TOML format that defines the properties of the "
         "photometry realisation and the method parameters (use --dump to "
         "obtain a default parameter file)")
parser.add_argument(
    "--no-aper", action="store_true",
    help="do not apply the aperture size depending signal-to-noise "
         "correction, running 'mocks_apertures' is no longer required")
parser.add_argument(
    "--seed", default="sapling",
    help="string to seed the random generator (default: %(default)s, results "
         "are only reproducible for the same number of threads)")
parser.add_argument(
    "--threads", type=int, default=-1,
    help="maximum number of threads to use (default: all)")

help_group = parser.add_argument_group("help and documentation")
help_group.add_argument(
    "-h", "--help", action="help",
    help="show this help message and exit")
help_group.add_argument(
    "--dump", nargs=0, action="dump",
    help="dump a default photometry configuration file to stdout and exit")


def main():
    args = parser.parse_args()
    photometry(**{name: getattr(args, name) for name in vars(args)})


if __name__ == "__main__":
    main()
