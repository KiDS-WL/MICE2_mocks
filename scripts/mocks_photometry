#!/usr/bin/env python3
import argparse
import logging.config

from galmock.core.config import logging_config
from galmock.core.utils import expand_path
from galmock.jobs import photometry
from galmock.photometry import PhotometryParser


parser = argparse.ArgumentParser(
    description="Create a photometry realisation based on simulated apertures "
                "and magnitude limits.",
    add_help=False)
parser.register("action", "dump", PhotometryParser.get_dump())

parser.add_argument(
    "datastore", type=expand_path,
    help="directory in which the data store is located")

parser.add_argument(
    "--mag", required=True,
    help="sub-directory within data store which contains the input magnitudes")
parser.add_argument(
    "--real", required=True,
    help="sub-directory within data store where the photometry realisations "
         "are stored")
parser.add_argument(
    "-c", "--config", type=expand_path, required=True,
    help="parameter file in TOML format that defines the properties of the "
         "photometry realisation and the method parameters (use --dump to "
         "obtain a default parameter file)")
parser.add_argument(
    "--seed", default="sapling",
    help="string to seed the random generator (default: %(default)s, results "
         "are only reproducible for the same number of threads)")
parser.add_argument(
    "--threads", type=int, default=-1,
    help="maximum number of threads to use (default: all)")
parser.add_argument(
    "-v", "--verbose", action="store_true", help="display debugging messages")

help_group = parser.add_argument_group("help and documentation")
help_group.add_argument(
    "-h", "--help", action="help",
    help="show this help message and exit")
help_group.add_argument(
    "--dump", nargs=0, action="dump",
    help="dump a default photometry configuration file to stdout and exit")


def main():
    args = parser.parse_args()
    logging.config.dictConfig(
        logging_config(args.datastore + ".log",
        overwrite=False, verbose=args.verbose))
    photometry(**{name: getattr(args, name) for name in vars(args)})


if __name__ == "__main__":
    main()
