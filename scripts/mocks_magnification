#!/usr/bin/env python
import argparse
import os
import sys

from mock_processing import PipeLogger, expand_path, open_datastore
from mock_processing.parallel import ParallelTable
from mock_processing.photometry import (load_photometry,
                                        magnification_correction_wrapped)
from mock_processing.utils import (ModificationStamp, create_column,
                                   require_column)


parser = argparse.ArgumentParser(
    description="Compute magnitudes corrected for gravitational lensing "
                "magnification in the limit of weak lensing.")
parser.add_argument(
    "datastore", type=expand_path,
    help="directory in which the data store is located")
parser.add_argument(
    "--mag",
    help="sub-directory within data store which contains the input magnitudes")
parser.add_argument(
    "--lensed",
    help="sub-directory within data store where the magnification corrected "
         "magnitudes are stored")
parser.add_argument(
    "--threads", type=int, default=4,
    help="number of threads to use (default: %(default)s)")


def main():

    args = parser.parse_args()
    logger = PipeLogger(__file__, args.datastore)
    timestamp = ModificationStamp(sys.argv)

    # apply the magnification correction to the model magnitudes
    with open_datastore(args.datastore, logger, readonly=False) as table:

        pool = ParallelTable(table, logger)
        pool.set_worker(magnification_correction_wrapped)

        # find convergence column
        kappa_path = "lensing/kappa"
        require_column(table, logger, kappa_path, "convergence")
        pool.add_argument_column(kappa_path)

        # find all magnitude columns
        try:
            input_mags = load_photometry(table, args.mag)
        except KeyError as e:
            logger.handleException(e)

        # create the output columns
        for key, mag_path in input_mags.items():
            lensed_path = os.path.join(args.lensed, key)
            # create new output columns
            column = create_column(
                table, logger, lensed_path, dtype=table[mag_path].dtype.str,
                attr={
                    "description":
                    "{:} with magnification correction applied".format(
                        lensed_path)},
                overwrite=True)
            timestamp.register(column)
            # add columns to call signature
            pool.add_argument_column(mag_path)
            pool.add_result_column(lensed_path)

        # compute and store the corrected magnitudes
        pool.execute(args.threads)

        logger.info("updating headers and closing data store")
        timestamp.finalize()
    # close the table and flush data
    logger.info("computation completed for {:,d} entries".format(len(table)))


if __name__ == "__main__":
    main()
