#!/usr/bin/env python
import argparse
import os
import sys

from mock_processing import PipeLogger, expand_path, open_datastore
from mock_processing.photometry import (load_photometry,
                                        magnification_correction)
from mock_processing.utils import (ModificationStamp, create_column,
                                   row_iter_progress)


parser = argparse.ArgumentParser(
    description='Compute magnitudes corrected for gravitational lensing '
                'magnification in the limit of weak lensing.')
parser.add_argument(
    "datastore", type=expand_path,
    help="directory in which the data store is located")
parser.add_argument(
    "--mag",
    help="sub-directory within data store which contains the input magnitudes")
parser.add_argument(
    "--lensed",
    help="sub-directory within data store where the magnification corrected "
         "magnitudes are stored")


def main():

    args = parser.parse_args()
    logger = PipeLogger(__file__, args.datastore)
    timestamp = ModificationStamp(sys.argv)

    # apply the magnification correction to the model magnitudes
    with open_datastore(args.datastore, logger, readonly=False) as table:

        # find convergence column
        kappa_path = "lensing/kappa"
        if kappa_path not in table:
            message = "convergence column not found: {:}".format(kappa_path)
            logger.handleException(KeyError(message))

        # find all magnitude columns
        try:
            input_mags = load_photometry(table, args.mag)
        except KeyError as e:
            logger.handleException(e)

        # create the output columns
        for key, mag_path in input_mags.items():
            # create new output columns
            lensed_path = os.path.join(args.lensed, key)
            column = create_column(
                table, logger, lensed_path, dtype=table[mag_path].dtype.str,
                attr={
                    "description":
                    "{:} with magnification correction applied".format(
                        lensed_path)},
                overwrite=True)
            timestamp.register(column)
        lensed_mags = load_photometry(table, args.lensed)

        # compute and store the corrected magnitudes
        logger.info("processing input stream ...")
        for start, end in row_iter_progress(table):
            kappa = table[kappa_path][start:end]
            for key, mag_path in input_mags.items():
                mags = table[mag_path][start:end]
                table[lensed_mags[key]][start:end] = \
                    magnification_correction(mags, kappa)

    # close the table
    timestamp.finalize()
    logger.info("computation completed for {:,d} entries".format(end))


if __name__ == "__main__":
    main()
