#!/usr/bin/env python3
import argparse
import logging.config

from galmock.core.config import logging_config
from galmock.core.readwrite import SUPPORTED_WRITERS
from galmock.core.utils import expand_path
from galmock.jobs import datastore_query


parser = argparse.ArgumentParser(
    description="Select a (sub-)sample of the pipeline output and save it "
                "in a different data format")

parser.add_argument(
    "datastore", type=expand_path,
    help="directory in which the data store is created")
parser.add_argument(
    "--verify", action="store_true",
    help="verify the data integrity of all accessed columns")
parser.add_argument(
    "-q", "--query",
    help="expression to select a subset of the pipeline output "
         "(default: select all entries)")

output_group = parser.add_argument_group("output table")
output_group.add_argument(
    "-o", "--output", type=expand_path,
    help="path to output data table (default: write on stdout)")
output_group.add_argument(
    "--format", choices=sorted(SUPPORTED_WRITERS.keys()),
    help="output table file format (default: inferred from file extension)")
output_group.add_argument(
    "-c", "--columns", type=expand_path, nargs="*",
    help="only write these columns to the output table (order preserved)")
output_group.add_argument(
    "--compression", choices=(
        "none", "snappy", "lzf", "gzip", "lzo", "brotli", "lz4", "zstd"),
    help="compression methods used for parquet (default: snappy) and HDF5 "
         "files (default: lzf), only none and gzip is supported by both "
         "formats")
output_group.add_argument(
    "--hdf5-shuffle", action="store_true",
    help="shuffle the HDF5 file data blocks prior to compression")
output_group.add_argument(
    "--hdf5-checksum", action="store_true",
    help="write fletcher32 check sums to HDF5 file data blocks")


def main():
    args = parser.parse_args()
    logging.config.dictConfig(
        logging_config(args.datastore + ".log", overwrite=False))
    datastore_query(**{name: getattr(args, name) for name in vars(args)})


if __name__ == "__main__":
    main()
