#!/usr/bin/env python
import argparse
import os
import sys

import mock_processing as mocks
from mock_processing.photometry import find_percentile_wrapped


parser = argparse.ArgumentParser(
    description="Compute the projected effective galaxy radius from galaxy "
                "bulge (Sersic n=4) and disk (Sersic n=1) components.")
parser.add_argument(
    "datastore", help="directory in which the data store is located")
parser.add_argument(
    "--flux-frac", type=float, default=0.5,
    help="fraction of the total flux emitted from within computed radius "
         "(default: %(default)s)")
parser.add_argument(
    "--threads", type=int, default=-1,
    help="maximum number of threads to use (default: all)")


def main():

    args = parser.parse_args()
    logger = mocks.PipeLogger(__file__, args.datastore)

    # apply the magnification correction to the model magnitudes
    with mocks.DataStore.open(args.datastore, False, logger=logger) as ds:
        ds.pool.max_threads = args.threads

        ds.pool.set_worker(find_percentile_wrapped)

        ds.pool.add_argument_constant(args.flux_frac)

        # find disk and bulge component columns
        input_columns = (
            ("disk size", "shape/disk/size"),
            ("bulge size", "shape/bulge/size"),
            ("bulge fraction", "shape/bulge/fraction"))
        for col_desc, path in input_columns:
            ds.require_column(path, col_desc)
            ds.pool.add_argument_column(path)

        r_e_path = "shape/R_effective"
        # create the output column
        ds.add_column(
            r_e_path, dtype="f4", overwrite=True, attr={
                "description":
                "effective radius (emitting {:.1%} of the flux)".format(
                    args.flux_frac)})
        # add column to call signature
        ds.pool.add_result_column(r_e_path)

        # compute and store the corrected magnitudes
        ds.pool.execute()
        logger.info("computation completed for {:,d} entries".format(len(ds)))


if __name__ == "__main__":
    main()
